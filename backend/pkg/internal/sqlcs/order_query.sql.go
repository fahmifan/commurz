// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: order_query.sql

package sqlcs

import (
	"context"
)

const findOrderByID = `-- name: FindOrderByID :one
SELECT id, user_id, number FROM orders WHERE id = ?
`

func (q *Queries) FindOrderByID(ctx context.Context, id string) (Order, error) {
	row := q.db.QueryRowContext(ctx, findOrderByID, id)
	var i Order
	err := row.Scan(&i.ID, &i.UserID, &i.Number)
	return i, err
}

const findOrderItemsByOrderID = `-- name: FindOrderItemsByOrderID :many
SELECT id, order_id, product_id, quantity, price FROM order_items WHERE order_id = ?
`

func (q *Queries) FindOrderItemsByOrderID(ctx context.Context, orderID string) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, findOrderItemsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveOrder = `-- name: SaveOrder :one
INSERT INTO orders (id, user_id, number)
VALUES (?1, ?2, ?3)
RETURNING id, user_id, number
`

type SaveOrderParams struct {
	ID     string
	UserID string
	Number string
}

func (q *Queries) SaveOrder(ctx context.Context, arg SaveOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, saveOrder, arg.ID, arg.UserID, arg.Number)
	var i Order
	err := row.Scan(&i.ID, &i.UserID, &i.Number)
	return i, err
}

const saveOrderItem = `-- name: SaveOrderItem :one
INSERT INTO order_items (id, order_id, product_id, quantity, price)
VALUES (?1, ?2, ?3, ?4, ?5)
RETURNING id, order_id, product_id, quantity, price
`

type SaveOrderItemParams struct {
	ID        string
	OrderID   string
	ProductID string
	Quantity  int64
	Price     int64
}

func (q *Queries) SaveOrderItem(ctx context.Context, arg SaveOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, saveOrderItem,
		arg.ID,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.Price,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
	)
	return i, err
}
