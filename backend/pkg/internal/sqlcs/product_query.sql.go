// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: product_query.sql

package sqlcs

import (
	"context"
	"database/sql"
)

const countAllProductsForBackoffice = `-- name: CountAllProductsForBackoffice :one
SELECT COUNT(*) FROM products
WHERE 
    CASE WHEN $1::bool THEN ("name" LIKE '%' || $2 || '%') ELSE TRUE END
`

type CountAllProductsForBackofficeParams struct {
	SetName bool
	Name    sql.NullString
}

func (q *Queries) CountAllProductsForBackoffice(ctx context.Context, arg CountAllProductsForBackofficeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAllProductsForBackoffice, arg.SetName, arg.Name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const findAllProductsForBackoffice = `-- name: FindAllProductsForBackoffice :many
SELECT id, name, price, version FROM products
WHERE 
    CASE WHEN $1::bool THEN ("name" LIKE '%' || $2 || '%') ELSE TRUE END
LIMIT $4
OFFSET $3
`

type FindAllProductsForBackofficeParams struct {
	SetName    bool
	Name       sql.NullString
	PageOffset int32
	PageLimit  int32
}

func (q *Queries) FindAllProductsForBackoffice(ctx context.Context, arg FindAllProductsForBackofficeParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, findAllProductsForBackoffice,
		arg.SetName,
		arg.Name,
		arg.PageOffset,
		arg.PageLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
