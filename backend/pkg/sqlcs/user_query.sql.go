// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user_query.sql

package sqlcs

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email)
VALUES ($1, $2)
RETURNING id, email, name, password_hash, verify_token, status, last_login_at, archived, created_at, updated_at, role
`

type CreateUserParams struct {
	ID    uuid.UUID
	Email string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.VerifyToken,
		&i.Status,
		&i.LastLoginAt,
		&i.Archived,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Role,
	)
	return i, err
}

const findAllUsers = `-- name: FindAllUsers :many
SELECT id, email, name, password_hash, verify_token, status, last_login_at, archived, created_at, updated_at, role FROM users
`

func (q *Queries) FindAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, findAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.PasswordHash,
			&i.VerifyToken,
			&i.Status,
			&i.LastLoginAt,
			&i.Archived,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCartByUserID = `-- name: FindCartByUserID :one
SELECT id, user_id FROM carts WHERE user_id = $1
`

func (q *Queries) FindCartByUserID(ctx context.Context, userID uuid.UUID) (Cart, error) {
	row := q.db.QueryRowContext(ctx, findCartByUserID, userID)
	var i Cart
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, email, name, password_hash, verify_token, status, last_login_at, archived, created_at, updated_at, role FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.VerifyToken,
		&i.Status,
		&i.LastLoginAt,
		&i.Archived,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Role,
	)
	return i, err
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, email, name, password_hash, verify_token, status, last_login_at, archived, created_at, updated_at, role FROM users WHERE id = $1
`

func (q *Queries) FindUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.VerifyToken,
		&i.Status,
		&i.LastLoginAt,
		&i.Archived,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Role,
	)
	return i, err
}
