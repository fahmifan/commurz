// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: commurzpb/v1/commurzpb.proto

package commurzpbv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/fahmifan/commurz/protogen/commurzpb/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CommurzServiceName is the fully-qualified name of the CommurzService service.
	CommurzServiceName = "commurzpb.v1.CommurzService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CommurzServiceCreateUserProcedure is the fully-qualified name of the CommurzService's CreateUser
	// RPC.
	CommurzServiceCreateUserProcedure = "/commurzpb.v1.CommurzService/CreateUser"
	// CommurzServiceCreateProductProcedure is the fully-qualified name of the CommurzService's
	// CreateProduct RPC.
	CommurzServiceCreateProductProcedure = "/commurzpb.v1.CommurzService/CreateProduct"
	// CommurzServiceAddProductStockProcedure is the fully-qualified name of the CommurzService's
	// AddProductStock RPC.
	CommurzServiceAddProductStockProcedure = "/commurzpb.v1.CommurzService/AddProductStock"
	// CommurzServiceReduceProductStockProcedure is the fully-qualified name of the CommurzService's
	// ReduceProductStock RPC.
	CommurzServiceReduceProductStockProcedure = "/commurzpb.v1.CommurzService/ReduceProductStock"
)

// CommurzServiceClient is a client for the commurzpb.v1.CommurzService service.
type CommurzServiceClient interface {
	CreateUser(context.Context, *connect_go.Request[v1.CreateUserRequest]) (*connect_go.Response[v1.User], error)
	// products
	CreateProduct(context.Context, *connect_go.Request[v1.CreateProductRequest]) (*connect_go.Response[v1.Product], error)
	AddProductStock(context.Context, *connect_go.Request[v1.ChangeProductStockRequest]) (*connect_go.Response[v1.Product], error)
	ReduceProductStock(context.Context, *connect_go.Request[v1.ChangeProductStockRequest]) (*connect_go.Response[v1.Product], error)
}

// NewCommurzServiceClient constructs a client for the commurzpb.v1.CommurzService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCommurzServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CommurzServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &commurzServiceClient{
		createUser: connect_go.NewClient[v1.CreateUserRequest, v1.User](
			httpClient,
			baseURL+CommurzServiceCreateUserProcedure,
			opts...,
		),
		createProduct: connect_go.NewClient[v1.CreateProductRequest, v1.Product](
			httpClient,
			baseURL+CommurzServiceCreateProductProcedure,
			opts...,
		),
		addProductStock: connect_go.NewClient[v1.ChangeProductStockRequest, v1.Product](
			httpClient,
			baseURL+CommurzServiceAddProductStockProcedure,
			opts...,
		),
		reduceProductStock: connect_go.NewClient[v1.ChangeProductStockRequest, v1.Product](
			httpClient,
			baseURL+CommurzServiceReduceProductStockProcedure,
			opts...,
		),
	}
}

// commurzServiceClient implements CommurzServiceClient.
type commurzServiceClient struct {
	createUser         *connect_go.Client[v1.CreateUserRequest, v1.User]
	createProduct      *connect_go.Client[v1.CreateProductRequest, v1.Product]
	addProductStock    *connect_go.Client[v1.ChangeProductStockRequest, v1.Product]
	reduceProductStock *connect_go.Client[v1.ChangeProductStockRequest, v1.Product]
}

// CreateUser calls commurzpb.v1.CommurzService.CreateUser.
func (c *commurzServiceClient) CreateUser(ctx context.Context, req *connect_go.Request[v1.CreateUserRequest]) (*connect_go.Response[v1.User], error) {
	return c.createUser.CallUnary(ctx, req)
}

// CreateProduct calls commurzpb.v1.CommurzService.CreateProduct.
func (c *commurzServiceClient) CreateProduct(ctx context.Context, req *connect_go.Request[v1.CreateProductRequest]) (*connect_go.Response[v1.Product], error) {
	return c.createProduct.CallUnary(ctx, req)
}

// AddProductStock calls commurzpb.v1.CommurzService.AddProductStock.
func (c *commurzServiceClient) AddProductStock(ctx context.Context, req *connect_go.Request[v1.ChangeProductStockRequest]) (*connect_go.Response[v1.Product], error) {
	return c.addProductStock.CallUnary(ctx, req)
}

// ReduceProductStock calls commurzpb.v1.CommurzService.ReduceProductStock.
func (c *commurzServiceClient) ReduceProductStock(ctx context.Context, req *connect_go.Request[v1.ChangeProductStockRequest]) (*connect_go.Response[v1.Product], error) {
	return c.reduceProductStock.CallUnary(ctx, req)
}

// CommurzServiceHandler is an implementation of the commurzpb.v1.CommurzService service.
type CommurzServiceHandler interface {
	CreateUser(context.Context, *connect_go.Request[v1.CreateUserRequest]) (*connect_go.Response[v1.User], error)
	// products
	CreateProduct(context.Context, *connect_go.Request[v1.CreateProductRequest]) (*connect_go.Response[v1.Product], error)
	AddProductStock(context.Context, *connect_go.Request[v1.ChangeProductStockRequest]) (*connect_go.Response[v1.Product], error)
	ReduceProductStock(context.Context, *connect_go.Request[v1.ChangeProductStockRequest]) (*connect_go.Response[v1.Product], error)
}

// NewCommurzServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCommurzServiceHandler(svc CommurzServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	commurzServiceCreateUserHandler := connect_go.NewUnaryHandler(
		CommurzServiceCreateUserProcedure,
		svc.CreateUser,
		opts...,
	)
	commurzServiceCreateProductHandler := connect_go.NewUnaryHandler(
		CommurzServiceCreateProductProcedure,
		svc.CreateProduct,
		opts...,
	)
	commurzServiceAddProductStockHandler := connect_go.NewUnaryHandler(
		CommurzServiceAddProductStockProcedure,
		svc.AddProductStock,
		opts...,
	)
	commurzServiceReduceProductStockHandler := connect_go.NewUnaryHandler(
		CommurzServiceReduceProductStockProcedure,
		svc.ReduceProductStock,
		opts...,
	)
	return "/commurzpb.v1.CommurzService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CommurzServiceCreateUserProcedure:
			commurzServiceCreateUserHandler.ServeHTTP(w, r)
		case CommurzServiceCreateProductProcedure:
			commurzServiceCreateProductHandler.ServeHTTP(w, r)
		case CommurzServiceAddProductStockProcedure:
			commurzServiceAddProductStockHandler.ServeHTTP(w, r)
		case CommurzServiceReduceProductStockProcedure:
			commurzServiceReduceProductStockHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCommurzServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCommurzServiceHandler struct{}

func (UnimplementedCommurzServiceHandler) CreateUser(context.Context, *connect_go.Request[v1.CreateUserRequest]) (*connect_go.Response[v1.User], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commurzpb.v1.CommurzService.CreateUser is not implemented"))
}

func (UnimplementedCommurzServiceHandler) CreateProduct(context.Context, *connect_go.Request[v1.CreateProductRequest]) (*connect_go.Response[v1.Product], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commurzpb.v1.CommurzService.CreateProduct is not implemented"))
}

func (UnimplementedCommurzServiceHandler) AddProductStock(context.Context, *connect_go.Request[v1.ChangeProductStockRequest]) (*connect_go.Response[v1.Product], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commurzpb.v1.CommurzService.AddProductStock is not implemented"))
}

func (UnimplementedCommurzServiceHandler) ReduceProductStock(context.Context, *connect_go.Request[v1.ChangeProductStockRequest]) (*connect_go.Response[v1.Product], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("commurzpb.v1.CommurzService.ReduceProductStock is not implemented"))
}
